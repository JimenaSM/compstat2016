a<- as.character("pobreza_porcentaje")
y<- p14$a
y
runApp()
names(p14)
y<- p14[,"pobreza_porcentaje"]
y
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
pairs(y~x,data=p14,
main="Diagrama de dispersion")
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
pairs(y~x,data=p14,
main="Diagrama de dispersion")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- runif(100,0,1)
plot(a)
a <- runif(1000,0,1)
plot(a)
a <- rnorm(1000,0,1)
plot(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- rnorm(1000,0,1)
hist(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,-"pobreza_porcentaje"]
m_0<-mean(X)
a_0<-10
b_0<-10
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,"pobreza_mod_porcentaje"]
m_0<-mean(X)
a_0<-10
b_0<-10
baylinreg <- function(Y,X,m_0,S_0,a_0,b_0) {
#
#	Bayesian linear regression model (conjugate prior)
#
# 	INPUTS:
# 	Y					-	Tx1 matrix of system outputs
# 	X					-	Txp-vector of system inputs
# 	m_0				-	px1 matrix, with prior mean
# 	S_0				-	pxp matrix, with prior precision
# 	a_0				-	prior shape
# 	b_0				-	prior scale
#
#
#	Initialization
T <- dim(Y)[1]
p <- dim(X)[2]
#	Updating
S_1 <- S_0 + t(X)%*%X
m_1 <- solve(S_1)%*%(S_0%*%m_0 + t(X)%*%Y)
a_1 <- a_0 + T/2
b_1 <- b_0 + 1/2*t(Y-X%*%m_1)%*%Y + 1/2*t(m_0-m_1)%*%S_0%*%m_0
#	Output
output <- list(m_1,S_1,a_1,b_1)
return(output)
}
#
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,"pobreza_mod_porcentaje"]
m_0<-mean(X)
a_0<-10
b_0<-10
baylinreg <- function(Y,X,m_0,S_0,a_0,b_0) {
#
#	Bayesian linear regression model (conjugate prior)
#
# 	INPUTS:
# 	Y					-	Tx1 matrix of system outputs
# 	X					-	Txp-vector of system inputs
# 	m_0				-	px1 matrix, with prior mean
# 	S_0				-	pxp matrix, with prior precision
# 	a_0				-	prior shape
# 	b_0				-	prior scale
#
#
#	Initialization
T <- dim(Y)[1]
p <- dim(X)[2]
#	Updating
S_1 <- S_0 + t(X)%*%X
m_1 <- solve(S_1)%*%(S_0%*%m_0 + t(X)%*%Y)
a_1 <- a_0 + T/2
b_1 <- b_0 + 1/2*t(Y-X%*%m_1)%*%Y + 1/2*t(m_0-m_1)%*%S_0%*%m_0
#	Output
output <- list(m_1,S_1,a_1,b_1)
output
return(output)
}
View(baylinreg)
View(baylinreg)
shiny::runApp()
runApp()
runApp()
runApp()
p14<-read.csv("e14.csv"),
p14<-p14[,-1],
p14<-read.csv("e14.csv")
p14<-p14[,-1]
runApp()
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,"pobreza_mod_porcentaje"]
m_0<-mean(X)
a_0<-10
b_0<-10
baylinreg <- function(Y,X,m_0,S_0,a_0,b_0) {
#
#	Bayesian linear regression model (conjugate prior)
#
# 	INPUTS:
# 	Y					-	Tx1 matrix of system outputs
# 	X					-	Txp-vector of system inputs
# 	m_0				-	px1 matrix, with prior mean
# 	S_0				-	pxp matrix, with prior precision
# 	a_0				-	prior shape
# 	b_0				-	prior scale
#
#
#	Initialization
T <- dim(Y)[1]
p <- dim(X)[2]
#	Updating
S_1 <- S_0 + t(X)%*%X
m_1 <- solve(S_1)%*%(S_0%*%m_0 + t(X)%*%Y)
a_1 <- a_0 + T/2
b_1 <- b_0 + 1/2*t(Y-X%*%m_1)%*%Y + 1/2*t(m_0-m_1)%*%S_0%*%m_0
#	Output
output <- list(m_1,S_1,a_1,b_1)
return(output)
plot(output)
}
#
baylinreg
baylinreg(Y,X,m_0,a_0,m_0)
baylinreg(Y,X,m_0,a_0,b_0)
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,"pobreza_mod_porcentaje"]
m_0<-mean(X)
a_0<-10
b_0<-10
baylinreg(Y,X,m_0,a_0,b_0)
baylinreg(Y,X,m_0,s_0,a_0,b_0)
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,"pobreza_mod_porcentaje"]
m_0<-mean(X)
a_0 <- rnorm(ns,0,1)
b_0 <- rnorm(ns,0,1)
sigma<-rnorm(ns,0.5)
s_0<-rnorm(ns,0,sigma^2)
Y<- p14[,"pobreza_porcentaje"]
X<- p14[,"pobreza_mod_porcentaje"]
ns<-length(X)
m_0<-mean(X)
a_0 <- rnorm(ns,0,1)
b_0 <- rnorm(ns,0,1)
sigma<-rnorm(ns,0.5)
s_0<-rnorm(ns,0,sigma^2)
baylinreg(Y,X,m_0,s_0,a_0,b_0)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmfit <- lm(weight ~ group)
group
weight
lmfit
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
lmfit <- lm(y ~ x)
lmfit
lmfit.qr
lmfit$qr
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmfit <- lm(weight ~ group)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
lmfit <- lm(y ~ x)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmfit <- lm(weight ~ group)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
bayesfit<-function(lmfit,N){
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
## now to sample residual variance
sigma<-df.residual*s2/rchisq(N,df.residual)
coef.sim<-sapply(sigma,function(x) mvrnorm(1,coef,Vb*x))
ret<-data.frame(t(coef.sim))
names(ret)<-names(lmfit$coef)
ret$sigma<-sqrt(sigma)
ret
}
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lmfit <- lm(weight ~ group)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
bayesfit<-function(lmfit,N){
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
## now to sample residual variance
sigma<-df.residual*s2/rchisq(N,df.residual)
coef.sim<-sapply(sigma,function(x) mvrnorm(1,coef,Vb*x))
ret<-data.frame(t(coef.sim))
names(ret)<-names(lmfit$coef)
ret$sigma<-sqrt(sigma)
ret
}
p14<-read.csv("e14.csv")
p14<-p14[,-1]
p14<-read.csv("e14.csv")
p14<-p14[,-1]
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
lmfit <- lm(y ~ x)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
bayesfit<-function(lmfit,N){
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
## now to sample residual variance
sigma<-df.residual*s2/rchisq(N,df.residual)
coef.sim<-sapply(sigma,function(x) mvrnorm(1,coef,Vb*x))
ret<-data.frame(t(coef.sim))
names(ret)<-names(lmfit$coef)
ret$sigma<-sqrt(sigma)
ret
}
Bayes.sum<-function(x)
{
c("mean"=mean(x),
"se"=sd(x),
"t"=mean(x)/sd(x),
"median"=median(x),
"CrI"=quantile(x,prob=0.025),
"CrI"=quantile(x,prob=0.975)
)
}
set.seed(134934)  ## reproducible sim
lmfit <- lm(y ~ x)
bf<-bayesfit(lmfit,10000)
?? mvnorm
install.packages("MASS")
library("MASS")
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
lmfit <- lm(y ~ x)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
bayesfit<-function(lmfit,N){
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
## now to sample residual variance
sigma<-df.residual*s2/rchisq(N,df.residual)
coef.sim<-sapply(sigma,function(x) mvrnorm(1,coef,Vb*x))
ret<-data.frame(t(coef.sim))
names(ret)<-names(lmfit$coef)
ret$sigma<-sqrt(sigma)
ret
}
Bayes.sum<-function(x)
{
c("mean"=mean(x),
"se"=sd(x),
"t"=mean(x)/sd(x),
"median"=median(x),
"CrI"=quantile(x,prob=0.025),
"CrI"=quantile(x,prob=0.975)
)
}
set.seed(134934)  ## reproducible sim
lmfit <- lm(y ~ x)
bf<-bayesfit(lmfit,10000)
t(apply(bf,2,Bayes.sum))
bf
head(bf)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("MASS")
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
lmfit <- lm(y ~ x)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
bayesfit<-function(lmfit,N){
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
## now to sample residual variance
sigma<-df.residual*s2/rchisq(N,df.residual)
coef.sim<-sapply(sigma,function(x) mvrnorm(1,coef,Vb*x))
ret<-data.frame(t(coef.sim))
names(ret)<-names(lmfit$coef)
ret$sigma<-sqrt(sigma)
ret
}
Bayes.sum<-function(x)
{
c("mean"=mean(x),
"se"=sd(x),
"t"=mean(x)/sd(x),
"median"=median(x),
"CrI"=quantile(x,prob=0.025),
"CrI"=quantile(x,prob=0.975)
)
}
set.seed(134934)  ## reproducible sim
lmfit <- lm(y ~ x)
bf<-bayesfit(lmfit,10000)
t(apply(bf,2,Bayes.sum))
head(bf)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?? plot
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("sm")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("faraway")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("MASS")
y<- p14[,"pobreza_porcentaje"]
x<- p14[,"pobreza_mod_porcentaje"]
lmfit <- lm(y ~ x)
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
bayesfit<-function(lmfit,N){
QR<-lmfit$qr
df.residual<-lmfit$df.residual
R<-qr.R(QR) ## R component
coef<-lmfit$coef
Vb<-chol2inv(R) ## variance(unscaled)
s2<-(t(lmfit$residuals)%*%lmfit$residuals)
s2<-s2[1,1]/df.residual
## now to sample residual variance
sigma<-df.residual*s2/rchisq(N,df.residual)
coef.sim<-sapply(sigma,function(x) mvrnorm(1,coef,Vb*x))
ret<-data.frame(t(coef.sim))
names(ret)<-names(lmfit$coef)
ret$sigma<-sqrt(sigma)
ret
}
Bayes.sum<-function(x)
{
c("mean"=mean(x),
"se"=sd(x),
"t"=mean(x)/sd(x),
"median"=median(x),
"CrI"=quantile(x,prob=0.025),
"CrI"=quantile(x,prob=0.975)
)
}
set.seed(134934)  ## reproducible sim
lmfit <- lm(y ~ x)
bf<-bayesfit(lmfit,10000)
t(apply(bf,2,Bayes.sum))
head(bf)
runApp()
